package Generated;


/**
* Generated/_DbServerInterfaceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /home/pavel/Desktop/Skola/DSV/projects/db_server_corba/src/server.idl
* Saturday, November 26, 2011 10:07:34 PM CET
*/


/*Serverovsky interfejs*/
public class _DbServerInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements Generated.DbServerInterface
{

  public String[] listDB ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("listDB", true);
                $in = _invoke ($out);
                String $result[] = Generated.StringArrayHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return listDB (        );
            } finally {
                _releaseReply ($in);
            }
  } // listDB

  public boolean createDB (String dbName) throws Generated.DBExistsException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createDB", true);
                $out.write_string (dbName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Generated/DBExistsException:1.0"))
                    throw Generated.DBExistsExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return createDB (dbName        );
            } finally {
                _releaseReply ($in);
            }
  } // createDB

  public int insert (String dbname, int key, String message) throws Generated.DBNotFoundException, Generated.DuplicateKeyException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("insert", true);
                $out.write_string (dbname);
                $out.write_long (key);
                $out.write_string (message);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Generated/DBNotFoundException:1.0"))
                    throw Generated.DBNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Generated/DuplicateKeyException:1.0"))
                    throw Generated.DuplicateKeyExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return insert (dbname, key, message        );
            } finally {
                _releaseReply ($in);
            }
  } // insert

  public int update (String dbname, int key, String message) throws Generated.DBNotFoundException, Generated.KeyNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("update", true);
                $out.write_string (dbname);
                $out.write_long (key);
                $out.write_string (message);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Generated/DBNotFoundException:1.0"))
                    throw Generated.DBNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Generated/KeyNotFoundException:1.0"))
                    throw Generated.KeyNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return update (dbname, key, message        );
            } finally {
                _releaseReply ($in);
            }
  } // update

  public Generated.DBRecord get (String dbname, int key) throws Generated.DBNotFoundException, Generated.KeyNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get", true);
                $out.write_string (dbname);
                $out.write_long (key);
                $in = _invoke ($out);
                Generated.DBRecord $result = Generated.DBRecordHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Generated/DBNotFoundException:1.0"))
                    throw Generated.DBNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Generated/KeyNotFoundException:1.0"))
                    throw Generated.KeyNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get (dbname, key        );
            } finally {
                _releaseReply ($in);
            }
  } // get

  public Generated.DBRecord[] getA (String dbname, int[] key) throws Generated.DBNotFoundException, Generated.KeyNotFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getA", true);
                $out.write_string (dbname);
                Generated.LongArrayHelper.write ($out, key);
                $in = _invoke ($out);
                Generated.DBRecord $result[] = Generated.DBRecordArrayHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Generated/DBNotFoundException:1.0"))
                    throw Generated.DBNotFoundExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Generated/KeyNotFoundException:1.0"))
                    throw Generated.KeyNotFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getA (dbname, key        );
            } finally {
                _releaseReply ($in);
            }
  } // getA

  public void flush ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("flush", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                flush (        );
            } finally {
                _releaseReply ($in);
            }
  } // flush

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Generated/DbServerInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _DbServerInterfaceStub
