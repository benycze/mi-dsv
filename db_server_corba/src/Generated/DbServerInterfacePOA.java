package Generated;


/**
* Generated/DbServerInterfacePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /home/pavel/Desktop/Skola/DSV/projects/db_server_corba/src/server.idl
* Saturday, November 26, 2011 10:07:34 PM CET
*/


/*Serverovsky interfejs*/
public abstract class DbServerInterfacePOA extends org.omg.PortableServer.Servant
 implements Generated.DbServerInterfaceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("listDB", new java.lang.Integer (0));
    _methods.put ("createDB", new java.lang.Integer (1));
    _methods.put ("insert", new java.lang.Integer (2));
    _methods.put ("update", new java.lang.Integer (3));
    _methods.put ("get", new java.lang.Integer (4));
    _methods.put ("getA", new java.lang.Integer (5));
    _methods.put ("flush", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // Generated/DbServerInterface/listDB
       {
         String $result[] = null;
         $result = this.listDB ();
         out = $rh.createReply();
         Generated.StringArrayHelper.write (out, $result);
         break;
       }

       case 1:  // Generated/DbServerInterface/createDB
       {
         try {
           String dbName = in.read_string ();
           boolean $result = false;
           $result = this.createDB (dbName);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (Generated.DBExistsException $ex) {
           out = $rh.createExceptionReply ();
           Generated.DBExistsExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // Generated/DbServerInterface/insert
       {
         try {
           String dbname = in.read_string ();
           int key = in.read_long ();
           String message = in.read_string ();
           int $result = (int)0;
           $result = this.insert (dbname, key, message);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (Generated.DBNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           Generated.DBNotFoundExceptionHelper.write (out, $ex);
         } catch (Generated.DuplicateKeyException $ex) {
           out = $rh.createExceptionReply ();
           Generated.DuplicateKeyExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // Generated/DbServerInterface/update
       {
         try {
           String dbname = in.read_string ();
           int key = in.read_long ();
           String message = in.read_string ();
           int $result = (int)0;
           $result = this.update (dbname, key, message);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (Generated.DBNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           Generated.DBNotFoundExceptionHelper.write (out, $ex);
         } catch (Generated.KeyNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           Generated.KeyNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // Generated/DbServerInterface/get
       {
         try {
           String dbname = in.read_string ();
           int key = in.read_long ();
           Generated.DBRecord $result = null;
           $result = this.get (dbname, key);
           out = $rh.createReply();
           Generated.DBRecordHelper.write (out, $result);
         } catch (Generated.DBNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           Generated.DBNotFoundExceptionHelper.write (out, $ex);
         } catch (Generated.KeyNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           Generated.KeyNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // Generated/DbServerInterface/getA
       {
         try {
           String dbname = in.read_string ();
           int key[] = Generated.LongArrayHelper.read (in);
           Generated.DBRecord $result[] = null;
           $result = this.getA (dbname, key);
           out = $rh.createReply();
           Generated.DBRecordArrayHelper.write (out, $result);
         } catch (Generated.DBNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           Generated.DBNotFoundExceptionHelper.write (out, $ex);
         } catch (Generated.KeyNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           Generated.KeyNotFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // Generated/DbServerInterface/flush
       {
         this.flush ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Generated/DbServerInterface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public DbServerInterface _this() 
  {
    return DbServerInterfaceHelper.narrow(
    super._this_object());
  }

  public DbServerInterface _this(org.omg.CORBA.ORB orb) 
  {
    return DbServerInterfaceHelper.narrow(
    super._this_object(orb));
  }


} // class DbServerInterfacePOA
